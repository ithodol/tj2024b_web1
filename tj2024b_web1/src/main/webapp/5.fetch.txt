[ JS 함수 ] 자바와 다르게 JS 함수는 하나의 자료의 타입이다
	1. 선언적 함수
		- function 함수명(매개변수명, 매개변수명){ }
		
	2. 익명 함수
		- function (매개변수명, 매개변수명){ }
		- const 상수명 = function(매개변수명, 매개변수명){ }
	3. 람다식 함수
		- (매개변수명, 매개변수명) => { }
		- const 상수명 = (매개변수명, 매개변수명) => { }
[람다식 활용처]
	1. 배열명.forEach(람다식 표현);
		- [ ].forEach(반복변수명) => {실행문;}
		- 배열내 첫번째 요소부터 마지막 요소까지 반복변수명 하나씩 대입 반복
		- forEach 사용처 : 배열 요소 단순 순회/조회
		
	2. let 새로운배열명.map(람다식 표현);
		- [ ].map((반복변수명) => {실행문;})
		- 배열내 첫번째 요소부터 마지막 요소까지 반복변수명 하나씩 대입 반복
		- 차이점 : forEach는 return 불가능, map 함수는 return 가능
		- map 사용처 : 배열 복사
	3. fetch().then(람다식표현).then(람다식표현).catch(람다식표현)

[fetch]
	1. 정의 : JS에서 제공하는 내장 함수
	2. 역할 : HTTP 요청을 보내고 응답을 비동기적으로 처리하는 함수
	3. 사용법
		fetch(URL, option)
			1. URL
				- 통신할 서블릿의 URL 주소 / @WebServlet() 확인
				- 쿼리스트링 / ?매개변수=값&매개변수=값
				
			2. option
				- HTTP 프로토콜의 method 선택
				- 요청 보낼 때 사용되는 HTTTP HEADER 정보 설정
				(1) METHOD
					- GET : fetch('HTTP URL', {method : `GET`})
							GET METHOD는 생략 가능
					- POST : fetch('HTTP URL', {method : `POST`})
					- PUT : fetch('HTTP URL', {method : `PUT`})
					- DELETE : fetch('HTTP URL', {method : `DELETE`})
						
				
				(2) HEADERS
					HTTP 프로토콜 요청(request)보낼 때 데이터 자료 타입 표시/명시(3.HTTP.txt참고)
					- {'Content-Type' : "application/json" }
						
				
				(3) BODY
					=> HTTP는 문자 자료만 전송이 가능하기 때문에 객체 타입 -> 문자타입 타입변환 필요
					- JSON.stringify(전송할객체)
					
			3. 요청보내고 응답받을 때 설정
				.then(응답객체 => 응답자료 타입 변환)
					(1) .json() : fetch 함수로 받은 HTTP 응답객체에서 JSON형식(application/json)으로 변환하고 반환하면 다음 then()함수가 이어서 실행
					(2) .text() : fetch 함수로 받은 HTTP 응답객체에서 문자형식(text/plain)으로 변환하고 반환하면 다음 then()함수가 이어서 
				.then(변수명 => {실행문;})
				
			4. 예외처리
				.catch(예외변수명 => {예외처리})
					
			
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		